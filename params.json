{
  "name": "Custom post type",
  "tagline": "Wordpress plugin for custom post type.",
  "body": "# custom_post_type\r\nWordpress plugin for custom post type.\r\n\r\n# Usage\r\n+ Create `/your_wp_theme_directory/models/SomePostType.php`.\r\n```php\r\n<?\r\n  class Event extends Artovenry\\CustomPostType\\Base{\r\n    static $post_type_options=[\r\n      \"label\"=>   \"Our Big Event!\",\r\n    ];\r\n    static $meta_attributes=[\"organization\", \"scheduled_on\", \"location\"];\r\n    static $meta_boxes= [\r\n      [\"name\"=>, \"extra\", \"label\"=> \"Extra Informations\"],\r\n      [\"name\"=>, \"option\", \"label\"=> \"Options\"]\r\n    ];\r\n    static $post_list_options=[\r\n      \"order\"=>[\"organization\", \"title\", \"scheduled_on\", \"location\", \"date\"],\r\n      \"columns\"=>[\r\n        \"organization\"=>[\"label\"=>\"\"],\r\n        \"scheduled_on\"=>[\"label\"=>\"Scheduled On\",\r\n          \"render\"=>function($record){echo \"<b style='color:red;'>{$record->scheduled_on}</b>\";},\r\n        ],\r\n        \"location\"=>[\"label\"=>\"Loc.\"]\r\n      ]\r\n    ];\r\n  }\r\n?>\r\n```\r\n+ Activate this plugin.\r\n```bash\r\n% wp plugin activate custom_post_type\r\n```\r\n\r\n+ That's all! For example, you can just use `Event` class from template files.\r\n```html\r\n<section>\r\n  <?foreach(Event::take(5) as $item):?>\r\n    <article>\r\n      ...\r\n      <footer>\r\n        <p class=\"organization\">\r\n          Organization: <?= $item->organization ?>\r\n        </p>\r\n      </footer>\r\n    </article>\r\n</section>\r\n```\r\n\r\n# Feature\r\n## Simple and useful APIs.\r\n\r\nRetrieve *published and latest* \"event\" post and wrap this `WP_Post` object into `Event` object.\r\n\r\n```php\r\n$event= Event::take();\r\necho $event instanceof Event; //true\r\necho $event->post instanceof WP_Post; //true\r\n```\r\n\r\nAccessing one post's meta attributes(which are persisted into `wp_postmeta` table), `get`, `set`, and `delete` them (You can simply define themes attributes by declaring static attribute or method named `meta_attributes`).\r\n\r\nMeta attributes are scalar values(boolean, integer, float, string) Non-scalar value, such as arrays, objects and recources cannot assign into meta attributes.\r\n\r\nNotice: `post_type` is automatically guessed and registered into WP from **class name**. For example, class `Event` will be interpretated to `event`, class `ScheduledEvent` will be `scheduled_event`. `post_type`'s length  is **limited 20chars**.\r\n\r\n```php\r\n$event= Event::take();\r\n$event->setMeta([\r\n  \"organization\" => \"Our friends\",\r\n  \"location\"     => \"Meiji Jingu\"\r\n]);\r\n$event->deleteMeta(\"scheduled_on\");\r\n$event->Event::take();\r\n\r\necho $event->location;      // \"Meiji Jingu\"\r\necho $event->organization;  // \"Our friends\"\r\necho $event->scheduled_on;  // null\r\n```\r\n\r\nNotice: We just use WP's build-in postmeta APIs. Unlike general ORM mapper framework, our APIs (`setMeta`, `deleteMeta` ,,,) don't effect anything to reciever object, simply call WP's functions.\r\n\r\n## Metabox\r\n\r\nYou can define multiple metaboxes for each custom_post_type classes via static attribute or method named `meta_boxes`. We basically use **Haml** for rendering engine.\r\n\r\nNotice: `$meta_boxes` and `$meta_attributes` are independent. You can define `$meta_attributes` without defining `$meta_boxes`. Of course, you will need to define `$meta_boxes` if you want users to edit your meta attributes in WP's edit interface.\r\n\r\n### Simple\r\n\r\n```php\r\nclass ExamplePostType extends Artovenry\\CustomPost\\Base{\r\n  static $meta_boxes=[\"name\"=>'options', \"label\"=> \"Please set your options!\"];\r\n  //...\r\n}\r\n```\r\n\r\nwill render metabox with template (do not forget `.html.haml` or `.php` extension) `{TEMPLATEPATH}/models/meta_boxes/example_post_type/options.html.haml`, or `{TEMPLATEPATH}/models/meta_boxes/example_post_type/options.php`.\r\n\r\n### You can define your own template file.\r\n\r\n```php\r\n  static $meta_boxes=[\"name\"=>'options', \"label\"=> \"OPTS\", \"template\"=>\"options\"];\r\n```\r\n\r\nIn this case, template file is `{TEMPLATEPATH}/meta_boxes/options.html.haml(or .php)`.\r\n\r\n### You can dynamically define your rendering method by specifing its static method's name, or callable value.\r\n\r\n```php\r\n  static $meta_boxes=[\"name\"=>\"options\", \"render\"=>\"render_options_box\"];\r\n  //...\r\n  static function render_options_box(){\r\n    //outputs your meta box,,,\r\n  }\r\n\r\n  //or with callable style...\r\n  static $meta_boxes=[\"name\"=>\"options\", \"render\"=>[$this->meta_renderer, \"render\"]]\r\n\r\n```\r\n\r\n## Callback\r\nWhen saving a post, POSTed `meta_attributes` will be automatically persisted(**added** or **updated**) into wp_postmeta table(via WP's action hook: `save_post`), when CSRF authorized. Otherwise, this callback is skipped (meta_attributes **will not persisted**).\r\n\r\nMake sure meta attributes which are not POSTed will not be deleted. When you do not prefer orphaned meta attributes, you will need to define your custom callback to destroy them.\r\n\r\n**$meta_boxes** generates its own csrf token (per meta_box) and render hidden  input field with `_art_nonce_{template's name}` (eg, `_art_nonce_item_price`).\r\nCSRF authorization check this token and authorize your POSTed meta_attributes.\r\n\r\nYou can define two custom callback methods `after_save` and `before_save`. `after_save` is invoked within WP's `save_post` hook, just after it's POSTed meta_attributes are persisted. `before_save` is invoked within WP's `wp_insert_post_data` hook.\r\n\r\nNotice: If CSRF authorization failed, `after_save` callback is canceled.\r\n\r\nThis will set \"updated_at\" meta attribute to current UNIX timestamp when updating a post:\r\n\r\n```php\r\nclass Information extends Artovenry\\CustomPostType\\Base{\r\n  static $meta_atributes= [\"updated_at\"];\r\n  static function after_save($post_id, $post, $updated){\r\n    if(!$updated)return;\r\n    $post->set_meta(\"updated_at\", time()); //$post is a instance of Information, not a WP_Post\r\n  }\r\n}\r\n```\r\n\r\nThis will truncate \"post_title\" attribute within 20 words before save a post.\r\n\r\n```php\r\nclass Information extends Artovenry\\CustomPostType\\Base{\r\n  static function before_save($sanitized, $raw){\r\n    $sanitized[\"post_title\"]= wp_trim_words($sanitized[\"post_title\"], 20);\r\n    return $sanitized;  //You must return $sanitized.\r\n  }\r\n}\r\n```\r\n\r\n## Validation\r\n\r\nWe do support **nothing** about it.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}